{
  "hash": "dc8f2e4656f06072fba081f102c17fa8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A Fun Look Back\"\nauthor: \"Rob\"\ndate: \"2024-12-26\"\ncategories: [market]\nimage: \"wojack2.jpg\"\n---\n\n\n\n# If I knew then what I know now...\n\nThe year was 2013. I was fresh out of college and like any 21 year old with little money and even fewer responsibilities, I wanted to immediately plow what limited funds I had to my name into the stock market in hopes of making some extra money.\n\nFrom what I remember of those days- NFLX was a popular name. The company was rapidly gaining subscribers as it continued to transition from DVD rentals to streaming services. Following the death of Steve Jobs in 2011, AAPL had since released the iPhone 5 and speculation was swirling that the company was working on smart watch, which would later be released as the Apple Watch in 2015. Windows users were still complaining about Windows 8 as MSFT focused on hardware with its release of the Surface Pro. AMZN was becoming more of a household name for online shoppers and Amazon Web Services began to be a name you would hear at work. META was still known as Facebook at the time and was just a place to post memes to friends and family online. Following its post IPO plunge in 2012, ad revenues were starting to pick up for the company. TSLA was beginning work on a \"Gigafactory\" following the success of the Model S and NVDA created graphics cards for our souped up gaming PCs.\n\nWith 2024 finally wrapping up, it is astonishing to look at many of these companies now and observe much they have changed over the last decade. Rather than distinct words like \"car company\" or \"search engine\" or \"social network\" being associated with these companies, we cannot talk about these companies without using shared buzzwords like Clusters, Large Language Models, Silicon Chips, and Artificial Intelligence.\n\nFor much of 2023 and 2024 market returns have seemingly been concentrated in a handful of technology companies, particularly those focused on artificial intelligence. As a thought experiment, I thought it would be interesting to see what the sweet the gains would have been like if I was able to jump into a time machine and purchase these stocks on the best day (lowest price) since 2013. For added fun, (and as an illustration of my luck), I also wanted to see what the largest losses would be if I had purchased the stock right before it had its worst draw down over the period and then sold at the low.\n\nTo set this up this scenario, we are going to look at the stocks that make up the Bloomberg Magnificent 7 - AAPL, AMZN, GOOGL, META, MSFT, NVDA, TSLA. We are going to find the highest and lowest amount of profits that could have been made if I purchased a stock at one close price and sold it at another close price (a total of 2 transactions). Lets assume that I cannot sell a stock before it has been purchased and stock can be bought and sold on the same day (resulting in a profit of \\$0).\n\nFirst, lets load the libraries that we are going to be using to conduct our analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the libraries that are going to be used\nlibrary(tidyverse) # To help with out data frame management and manipulation.\nlibrary(tidyquant) # this will help us gather the closing stock prices. \n```\n:::\n\n\n\nNext, we will define a vector called stock_symbols and place the tickers for the companies that we are interested in looking at. The symbols I have chosen make up the Bloomberg Magnificent 7.\n\nAfter the tickers are defined, we pass these tickers through tidyquant's built in tq_get() function, which will pull the daily volume and open, high, low, close, and adjusted stock prices for each of the symbols we defined. I am only interested in the closing price for each ticker, so I will use the select() function to extract the symbol, date, and close columns from the pulled data. Lets take a look at the first 10 rows to make sure we have the data we are looking for.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define the stock symbols.\nstock_symbols <- c(\"AAPL\", \"AMZN\", \"GOOGL\", \"META\", \"MSFT\", \"NVDA\", \"TSLA\")\n\n# Get the prices from yahoo finance using tidyquant\nstock_prices <- tq_get(stock_symbols, get = \"stock.prices\", from = \"2019-12-31\", to = \"2024-12-27\") %>% select(symbol, date, close)\n\n# Show the stock prices\nhead(stock_prices, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   symbol date       close\n   <chr>  <date>     <dbl>\n 1 AAPL   2019-12-31  73.4\n 2 AAPL   2020-01-02  75.1\n 3 AAPL   2020-01-03  74.4\n 4 AAPL   2020-01-06  74.9\n 5 AAPL   2020-01-07  74.6\n 6 AAPL   2020-01-08  75.8\n 7 AAPL   2020-01-09  77.4\n 8 AAPL   2020-01-10  77.6\n 9 AAPL   2020-01-13  79.2\n10 AAPL   2020-01-14  78.2\n```\n\n\n:::\n:::\n\n\n\nNext, let's visualize the price data over time. We will use ggplot (built into the tidyquant library).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(theme_tq())\n\nggplot(stock_prices, aes(date, close, color = symbol)) +\n  geom_line() +\n  theme_tq()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nFrom the chart, it looks like there was a good amount of variance in 2020 following the 2020 global pandemic and the 2022 market downturn on the back of 40-year-high inflation that prompted the Federal Reserve to raise interest rates at the fasted rate in history. Next, we will use the cummax() and cummin() functions for each symbol to discover the highest and lowest future prices for each date.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstock_prices %>% \n  arrange(symbol, desc(date)) %>% \n  group_by(symbol) %>% \n  mutate(highest_future = cummax(close),\n         lowest_future = cummin(close))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,792 × 5\n# Groups:   symbol [7]\n   symbol date       close highest_future lowest_future\n   <chr>  <date>     <dbl>          <dbl>         <dbl>\n 1 AAPL   2024-12-26  259.           259.          259.\n 2 AAPL   2024-12-24  258.           259.          258.\n 3 AAPL   2024-12-23  255.           259.          255.\n 4 AAPL   2024-12-20  254.           259.          254.\n 5 AAPL   2024-12-19  250.           259.          250.\n 6 AAPL   2024-12-18  248.           259.          248.\n 7 AAPL   2024-12-17  253.           259.          248.\n 8 AAPL   2024-12-16  251.           259.          248.\n 9 AAPL   2024-12-13  248.           259.          248.\n10 AAPL   2024-12-12  248.           259.          248.\n# ℹ 8,782 more rows\n```\n\n\n:::\n:::\n\n\n\nTo better understand the functions and the data in the table - lets look at the 10th row within the table. The closing price of AAPL on 12-12-2024 was \\$247.96 and what the lowest for the last 10 market days. The highest in the future was \\$259.02, meaning that if you had purchased AAPL on 12-12-2024, you would have gained over \\$11 per share with no draw down on your position over the last 10 market days.\n\nBy finding the largest/smallest difference between each day's price and the highest/lowest future price, we can calculate the highest possible gain and largest possible loss per share over the time period assuming one purchase and one sale.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstock_prices %>%\n  arrange(symbol, desc(date)) %>%\n  group_by(symbol) %>%\n  summarize(highest_gain = max(cummax(close) - close),\n            biggest_loss = min(cummin(close) - close))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  symbol highest_gain biggest_loss\n  <chr>         <dbl>        <dbl>\n1 AAPL           203.        -57.0\n2 AMZN           151.       -105. \n3 GOOGL          144.        -66.4\n4 META           544.       -293. \n5 MSFT           332.       -129. \n6 NVDA           144.        -36.7\n7 TSLA           456.       -302. \n```\n\n\n:::\n:::\n\n\n\n# Lets add a variation...\n\nNow lets add some variation to our analysis. When looking back at our biggest winners and biggest losers, we often kick ourselves for not holding on a bit longer - we either left money on the table or we took a larger loss by not staying put. I believe it was the Bitcoiners who coined the term \"HODL\" (Hold on for dear life). What if we change the parameters of our analysis so that we have to hold the stock for at least 1 year or about 252 trading days before selling? Does this change our results?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Separated into a mutate and a summarize just for the sake of clarity\nstock_prices %>%\n  arrange(symbol, desc(date)) %>%\n  group_by(symbol) %>%\n  mutate(highest_future = lag(cummax(close), 252),\n         lowest_future = lag(cummin(close), 252)) %>%\n  summarize(highest_gain = max(highest_future - close, na.rm = TRUE),\n            biggest_loss = min(lowest_future - close, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  symbol highest_gain biggest_loss\n  <chr>         <dbl>        <dbl>\n1 AAPL           203.        -57.0\n2 AMZN           151.       -105. \n3 GOOGL          144.        -64.6\n4 META           544.       -293. \n5 MSFT           332.       -121. \n6 NVDA           144.        -19.3\n7 TSLA           456.       -302. \n```\n\n\n:::\n:::\n\n\n\nAs we can see from our revised table, the largest possible gains for each of the tickers does not change (probably as expected). Over this time frame, the losses really only change marginally - these stocks have been growing over time - especially in 2023 and 2024.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
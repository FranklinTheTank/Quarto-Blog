---
title: "Looking Back at Tech"
author: "Rob"
date: "2024-12-27"
categories: [market]
image: "wojack2.jpg"
---

# A Look Back at Tech

2024 is finally wrapping up, and it's time to reconnect with the family and friends you've been avoiding all year. As you gather around, beers in hand, you quickly realize that the market has made everyone (else) rich this year. They're tossing around buzzwords like: Clusters, Large Language Models, Silicon, Artificial Intelligenceâ€”words that have been soldered into your brain over the last few years. You lower your head in shame, knowing the only "chips" you bought this year were the ones that taste like Sour Cream and Onion.

For much of 2023 and 2024 market returns have seemingly been concentrated in a handful of technology companies, particularly those focused on artificial intelligence. As a thought experiment, I thought it would be interesting to see what the sweet gains would like if I was able to jump into a time machine and purchase these stocks on the best day. For added fun, (and as an illustration of my luck), I also wanted to see what the largest losses would be if I had purchased the stock right before it had its worst draw down over the period and then sold at the low.

To set this up this scenario, we are going to look at the stocks that make up the Bloomberg Magnificent 7 - AAPL, AMZN, GOOGL, META, MSFT, NVDA, TSLA. We are going to find the highest and lowest amount of profits that could have been made if I purchased a stock at one close price and sold it at another close price (a total of 2 transactions). Lets assume that I cannot sell a stock before it has been purchased and stock can be bought and sold on the same day (resulting in a profit of \$0).

First, lets load the libraries that we are going to be using to conduct our analysis.

```{r, message=FALSE, warning=FALSE}
# Load the libraries that are going to be used
library(tidyverse) # To help with out data frame management and manipulation.
library(tidyquant) # this will help us gather the closing stock prices. 
```

Next, we will define a vector called stock_symbols and place the tickers for the companies that we are interested in looking at. The symbols I have chosen make up the Bloomberg Magnificent 7.

After the tickers are defined, we pass these tickers through tidyquant's built in tq_get() function, which will pull the daily volume and open, high, low, close, and adjusted stock prices for each of the symbols we defined. I am only interested in the closing price for each ticker, so I will use the select() function to extract the symbol, date, and close columns from the pulled data. Lets take a look at the first 10 rows to make sure we have the data we are looking for.

```{r}
# Define the stock symbols.
stock_symbols <- c("AAPL", "AMZN", "GOOGL", "META", "MSFT", "NVDA", "TSLA")

# Get the prices from yahoo finance using tidyquant
stock_prices <- tq_get(stock_symbols, get = "stock.prices", from = "2019-12-31", to = "2024-12-27") %>% select(symbol, date, close)

# Show the stock prices
head(stock_prices, 10)
```

Next, let's visualize the price data over time. We will use ggplot (built into the tidyquant library).

```{r}
theme_set(theme_tq())

ggplot(stock_prices, aes(date, close, color = symbol)) +
  geom_line() +
  theme_tq()
```

From the chart, it looks like there was a good amount of variance in 2020 following the 2020 global pandemic and the 2022 market downturn on the back of 40-year-high inflation that prompted the Federal Reserve to raise interest rates at the fasted rate in history. Next, we will cummax() and cummin() functions for each symbol to discover the highest and lowest future prices for each date.

```{r}
stock_prices %>% 
  arrange(symbol, desc(date)) %>% 
  group_by(symbol) %>% 
  mutate(highest_future = cummax(close),
         lowest_future = cummin(close))
```

To better understand the functions and the data in the table - lets look at the 10th row within the table. The closing price of AAPL on 12-12-2024 was \$247.96 and what the lowest for the last 10 market days. The highest in the future was \$259.02, meaning that if you had purchased AAPL on 12-12-2024, you would have gained over \$11 per share with no draw down on your position over the last 10 market days.

By finding the largest/smallest difference between each day's price and the highest/lowest future price, we can calculate the highest possible gain and largest possible loss per share over the time period assuming one purchase and one sale.

```{r}
stock_prices %>%
  arrange(symbol, desc(date)) %>%
  group_by(symbol) %>%
  summarize(highest_gain = max(cummax(close) - close),
            biggest_loss = min(cummin(close) - close))
```

Now lets add some variation to our analysis. When looking back at our biggest winners and biggest losers, we often kick ourselves for not holding on a bit longer - we either left money on the table or we took a larger loss by not staying put. I believe it was the Bitcoiners who coined the term "HODL" (Hold on for dear life). What if we change the parameters of our analysis so that we have to hold the stock for at least 1 year or about 252 trading days before selling? Does this change our results??

```{r}
# Separated into a mutate and a summarize just for the sake of clarity
stock_prices %>%
  arrange(symbol, desc(date)) %>%
  group_by(symbol) %>%
  mutate(highest_future = lag(cummax(close), 252),
         lowest_future = lag(cummin(close), 252)) %>%
  summarize(highest_gain = max(highest_future - close, na.rm = TRUE),
            biggest_loss = min(lowest_future - close, na.rm = TRUE))
```

As we can see from our revised table, the largest possible gains for each of the tickers does not change (probably as expected). Over this time frame, the losses really only change marginally - these stocks have been growing over time - especially in 2023 and 2024.
